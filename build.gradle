buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.2.2'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral() // Lombok
    maven {
        name = 'papermc-waterfall'
        url = 'https://papermc.io/repo/repository/maven-public/'
    } // Waterfall
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    compileOnly 'io.github.waterfallmc:waterfall-api:1.18-R0.1-SNAPSHOT'
    compileOnly 'com.velocitypowered:velocity-api:3.0.1'

    compileOnly files('/home/jones/IdeaProjects/waterfall-1.19-504.jar')
}

def outputJar = "${buildDir}/libs/${rootProject.name}.jar"

task generateDictionry {
    outputs.file("${buildDir}/../proguard/dictionary")

    doLast {
        def random = new Random()
        // china
        def begin = random.nextInt(200) + 34000
        def end = begin + 2000 + random.nextInt(4000)
        def chars = (begin..end)
                .findAll { Character.isValidCodePoint(it) && Character.isJavaIdentifierPart(it) }
                .collect { String.valueOf(Character.toChars(it)) }
        int max = chars.size()
        def start = []
        for (int i = 0; i < max; i++) {
            char c = chars.get(i).charAt(0)
            if (Character.isJavaIdentifierStart(c)) {
                start << String.valueOf(c)
            }
        }
        Collections.shuffle(start)
        def f = outputs.files.getSingleFile()
        f.getParentFile().mkdirs()
        f.withWriter("UTF-8") {
            it.write(start.join(System.lineSeparator()))
            it.write()
        }
    }
}

task myProguardTask(type: proguard.gradle.ProGuardTask) {

    // run proguard
    configuration 'proguard/config'

    // specify input and output files
    injars "${outputJar}"
    outjars "${buildDir}/libs/${rootProject.name}_proguard.jar"

    // add the library jars
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    libraryjars "/home/jones/IdeaProjects/waterfall-1.19-504.jar"
}

java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8

shadowJar() {
   // minimize()
    archiveFileName = "${project.name}.jar"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}